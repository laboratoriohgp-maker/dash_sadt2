import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.io as pio
from io import BytesIO
from PIL import Image
from datetime import timedelta, datetime, date
import os, sys
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√£o da p√°gina com tema personalizado
st.set_page_config(
    page_title="Dashboard - SADT", 
    page_icon="üè•", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado para melhor visual
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1f77b4 0%, #2ca02c 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .metric-card {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #1f77b4;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin: 0.5rem 0;
    }
    
    .insight-box {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    
    .warning-box {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .success-box {
        background: #d1edff;
        border: 1px solid #74b9ff;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .dose-reference {
        background: #f0f2f6;
        border: 1px solid #d0d7de;
        border-radius: 5px;
        padding: 0.8rem;
        margin: 0.5rem 0;
        font-size: 0.85em;
    }
    
    .stTab [data-baseweb="tab"] {
        height: 50px;
        white-space: pre-wrap;
        background-color: #f0f2f6;
        border-radius: 4px 4px 0px 0px;
        gap: 1px;
        padding-top: 10px;
        padding-bottom: 10px;
    }
    
    .stTab [aria-selected="true"] {
        background-color: #1f77b4;
        color: white;
    }
</style>
""", unsafe_allow_html=True)

# Header principal
st.markdown("""
<div class="main-header">
    <h1>üè• Relatorio Analitico SADT - Servi√ßo de Apoio Diagnostico e Terapeutico</h1>
    <p>Sistema Avan√ßado de An√°lise de Dados</p>
</div>
""", unsafe_allow_html=True)

# ---------------------------
# Fun√ß√µes Utilit√°rias Melhoradas
# ---------------------------
@st.cache_data
def load_excel(file) -> pd.DataFrame:
    """Carrega arquivo Excel com tratamento robusto de colunas"""
    df = pd.read_excel(file, engine="openpyxl")
    
    # Normaliza√ß√£o mais robusta de colunas
    cols = (
        pd.Index(df.columns.astype(str))
        .str.replace("\n", " ", regex=False)
        .str.strip()
        .str.normalize("NFKD")
        .str.encode("ascii", errors="ignore")
        .str.decode("utf-8")
        .str.upper()
        .str.replace(r"[^\w\s]", "_", regex=True)
        .str.replace(r"\s+", "_", regex=True)
    )
    df.columns = cols
    return df

def find_col(df, candidates):
    """Busca mais inteligente de colunas"""
    cols = list(df.columns)
    for cand in candidates:
        cand_norm = cand.upper().replace(" ", "_").replace("\n","_")
        for c in cols:
            if cand_norm in c or any(word in c for word in cand_norm.split("_")):
                return c
    return None

def parse_excel_dates(series):
    """Parser de datas mais robusto"""
    s = series.copy()
    
    # Primeira tentativa: parsing normal
    dt = pd.to_datetime(s, errors="coerce", dayfirst=True)
    na_frac = dt.isna().mean() if len(dt) > 0 else 1.0
    
    # Se muitas datas inv√°lidas, tenta parsing de Excel serial
    if na_frac > 0.1:
        try:
            numeric = pd.to_numeric(s, errors="coerce")
            if numeric.notna().any():
                # Excel usa 1900-01-01 como origem, mas tem bug do ano 1900
                dt2 = pd.to_datetime(numeric, unit='D', origin='1899-12-30', errors='coerce')
                dt = dt.combine_first(dt2)
        except Exception:
            pass
    
    return dt

def format_duration(hours):
    """Converte horas em formato dd/hh:mm:ss"""
    if pd.isna(hours) or hours < 0:
        return "N/A"
    
    total_seconds = int(hours * 3600)
    days = total_seconds // 86400
    remaining = total_seconds % 86400
    hours_part = remaining // 3600
    minutes = (remaining % 3600) // 60
    seconds = remaining % 60
    
    if days > 0:
        return f"{days}d/{hours_part:02d}:{minutes:02d}:{seconds:02d}"
    else:
        return f"{hours_part:02d}:{minutes:02d}:{seconds:02d}"

def generate_insights(df, analysis_type="general"):
    """Gera insights inteligentes baseados nos dados"""
    insights = []
    
    if analysis_type == "volume":
        total_exames = len(df)
        media_diaria = df.groupby(df["DATA_REALIZACAO"].dt.date).size().mean()
        
        if media_diaria > 100:
            insights.append("üìà **Alto volume**: M√©dia superior a 100 exames/dia indica centro de alta demanda")
        elif media_diaria < 20:
            insights.append("üìâ **Baixo volume**: M√©dia inferior a 20 exames/dia pode indicar subutiliza√ß√£o")
            
        # An√°lise de variabilidade
        cv = df.groupby(df["DATA_REALIZACAO"].dt.date).size().std() / media_diaria
        if cv > 0.3:
            insights.append("‚ö° **Alta variabilidade**: Demanda oscila muito entre dias (CV > 30%)")
    
    elif analysis_type == "temporal":
        if "DELTA_HORAS" in df.columns:
            tempo_medio = df["DELTA_HORAS"].median()  # Usar mediana em vez de m√©dia
            if tempo_medio > 72:  # 3 dias
                insights.append("‚è∞ **Tempo de espera elevado**: Mediana superior a 3 dias entre pedido e realiza√ß√£o")
            elif tempo_medio < 24:  # 1 dia
                insights.append("‚ö° **Resposta r√°pida**: Tempo mediano inferior a 24 horas √© excelente")
    
    elif analysis_type == "efficiency":
        # An√°lise de efici√™ncia por per√≠odo
        df_hours = df.copy()
        df_hours["HORA"] = df_hours["DATA_REALIZACAO"].dt.hour
        peak_hours = df_hours.groupby("HORA").size().idxmax()
        
        if peak_hours < 8 or peak_hours > 18:
            insights.append("üåô **Hor√°rio at√≠pico de pico**: Maior demanda fora do hor√°rio comercial")
        
        # Concentra√ß√£o de exames
        top_5_percent = df["EXAME_NORM"].value_counts().head(int(len(df["EXAME_NORM"].unique()) * 0.05)).sum()
        concentration = (top_5_percent / len(df)) * 100
        
        if concentration > 50:
            insights.append(f"üéØ **Alta concentra√ß√£o**: {concentration:.1f}% dos exames s√£o de apenas 5% dos tipos")
    
    return insights

def create_advanced_metrics_card(title, value, subtitle, delta=None, color="#1f77b4"):
    """Cria cards de m√©tricas avan√ßados"""
    delta_html = ""
    if delta is not None:
        delta_color = "green" if delta >= 0 else "red"
        delta_symbol = "‚ÜóÔ∏è" if delta >= 0 else "‚ÜòÔ∏è"
        delta_html = f"""<p style="color: {delta_color}; margin: 0; font-size: 0.9em;">{delta_symbol} {delta:+.1f}%</p>"""
    
    return f"""
    <div style="
        background: white;
        padding: 1.2rem;
        border-radius: 10px;
        border-left: 4px solid {color};
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        margin: 0.5rem 0;
    ">
        <h3 style="color: {color}; margin: 0; font-size: 1.1em;">{title}</h3>
        <h2 style="color: #2c3e50; margin: 0.2rem 0; font-size: 2em;">{value}</h2>
        <p style="color: #7f8c8d; margin: 0; font-size: 0.9em;">{subtitle}</p>
        {delta_html}
    </div>
    """

# ---------------------------
# Upload e Processamento
# ---------------------------
uploaded = st.file_uploader(
    "üìÇ **Selecione o arquivo Excel com dados radiol√≥gicos**",
    type=["xlsx", "xls"],
    help="Arquivo deve conter colunas: PACIENTE, DATA_REALIZACAO, EXAME, etc.",
    key="file_upload"
)

if uploaded is not None:
    # Carregamento com feedback visual
    with st.spinner('üîÑ Carregando e processando dados...'):
        df_raw = load_excel(uploaded)
    
    # Sucesso no carregamento
    st.success(f"‚úÖ **Arquivo carregado com sucesso!** {uploaded.name} | **{len(df_raw):,}** registros")
    
    # Expander para visualizar dados brutos
    with st.expander("üîç **Visualizar dados brutos**", expanded=False):
        st.dataframe(df_raw.head(1000), use_container_width=True)
        st.caption(f"Mostrando at√© 1000 primeiras linhas de {len(df_raw):,} total")

    # ---------------------------
    # Mapeamento de Colunas Inteligente
    # ---------------------------
    st.markdown("### üîß **Mapeamento de Colunas**")
    
    # Busca autom√°tica de colunas
    col_mappings = {
        "ATEND": find_col(df_raw, ["ATEND", "ATENDIMENTO", "NUM_ATEND"]),
        "NOME": find_col(df_raw, ["NOME_DO_PACIENTE", "NOME_PACIENTE", "PACIENTE", "NOME"]),
        "PEDIDO": find_col(df_raw, ["PEDIDO", "NUM_PEDIDO", "NUMERO_PEDIDO"]),
        "DATA_PEDIDO": find_col(df_raw, ["DATA_PEDIDO", "DATA_PED", "DT_PEDIDO"]),
        "DATA_REALIZ": find_col(df_raw, ["DATA_REALIZ", "DATA_REALIZA", "DATA_REALIZAC", "DATA_REALIZACAO", "DT_REALIZACAO"]),
        "EXAME": find_col(df_raw, ["EXAME", "PROCEDIMENTO", "TIPO_EXAME"]),
        "TIPO": find_col(df_raw, ["TIPO", "CATEGORIA", "MODALIDADE"]),
        "ENCAM": find_col(df_raw, ["ENCAMINHAMENTO", "ENCAM", "ORIGEM"]),
        "LOCAL": find_col(df_raw, ["LOCAL", "PROCEDENCIA", "UNIDADE"]),
        "TECNICO": find_col(df_raw, ["TECNICO", "OPERADOR"]),
        "MEDICO": find_col(df_raw, ["MEDICO", "RADIOLOGISTA", "LAUDO"])
    }
    
    # Mostra status do mapeamento
    mapping_cols = st.columns(4)
    for i, (key, col) in enumerate(col_mappings.items()):
        with mapping_cols[i % 4]:
            status = "‚úÖ" if col else "‚ùå"
            st.markdown(f"**{key}**: {status} `{col if col else 'N√£o encontrada'}`")
    
    # Valida√ß√£o de colunas obrigat√≥rias
    required_cols = ["DATA_REALIZ", "EXAME"]
    missing_required = [k for k in required_cols if col_mappings[k] is None]
    
    if missing_required:
        st.error(f"‚ö†Ô∏è **Colunas obrigat√≥rias n√£o encontradas**: {missing_required}")
        st.stop()

    # ---------------------------
    # Pr√©-processamento Avan√ßado
    # ---------------------------
    @st.cache_data
    def advanced_preprocess(df):
        """Pr√©-processamento avan√ßado dos dados"""
        d = df.copy()
        
        # Parse de datas
        d["DATA_REALIZACAO"] = parse_excel_dates(d[col_mappings["DATA_REALIZ"]])
        if col_mappings["DATA_PEDIDO"]:
            d["DATA_PEDIDO"] = parse_excel_dates(d[col_mappings["DATA_PEDIDO"]])
        
        # ID do paciente mais robusto
        if col_mappings["NOME"] and col_mappings["ATEND"]:
            d["PACIENTE_ID"] = (d[col_mappings["ATEND"]].astype(str).str.strip() + 
                               " | " + d[col_mappings["NOME"]].astype(str).str.strip())
        elif col_mappings["NOME"]:
            d["PACIENTE_ID"] = d[col_mappings["NOME"]].astype(str).str.strip()
        elif col_mappings["ATEND"]:
            d["PACIENTE_ID"] = d[col_mappings["ATEND"]].astype(str).str.strip()
        else:
            d["PACIENTE_ID"] = "PACIENTE_" + d.index.astype(str)
        
        # Normaliza√ß√£o de exames
        d["EXAME_NORM"] = (d[col_mappings["EXAME"]].astype(str)
                          .str.upper().str.strip()
                          .str.replace(r"[^\w\s]", " ", regex=True)
                          .str.replace(r"\s+", " ", regex=True))
        
        # Classifica√ß√£o inteligente de grupos
        def classificar_grupo_avancado(exame):
            exame = str(exame).upper().strip()
            
            # Raio-X
            if any(term in exame for term in ["RX", "RAIO", "RADIO"]):
                return "RAIO-X"
            
            # Tomografia
            if any(term in exame for term in ["TC", "TOMOGRAFIA", "CT"]):
                return "TOMOGRAFIA"
                
            # Ultrassom
            if any(term in exame for term in ["US", "ULTRA", "ECO"]):
                return "ULTRASSOM"
                
            # Resson√¢ncia
            if any(term in exame for term in ["RM", "RESSONANCIA", "MAGNETICA", "MRI"]):
                return "RESSONANCIA"
                
            # Mamografia
            if any(term in exame for term in ["MAMO", "MAMA"]):
                return "MAMOGRAFIA"
                
            # Densitometria
            if any(term in exame for term in ["DENSI", "OSTEO"]):
                return "DENSITOMETRIA"
                
            # Eletrocardiograma
            if any(term in exame for term in ["ECG", "ELETRO", "CARDIO"]):
                return "ELETROCARDIOGRAMA"
                
            return "OUTROS"
        
        d["GRUPO_EXAME"] = d["EXAME_NORM"].apply(classificar_grupo_avancado).astype("category")
        
        # Dose estimada corrigida baseada em refer√™ncias m√©dicas
        # Refer√™ncia: ICRP 103, 2007 e NCRP 160, 2009
        dose_referencias = {
            # Raio-X (mSv)
            "RX TORAX": 0.1,
            "RX ABDOME": 0.7,
            "RX COLUNA": 1.5,
            "RX PELVE": 0.6,
            "RX EXTREMIDADES": 0.01,
            "RX CRANEO": 0.1,
            "RX COLUNA CERVICAL": 0.2,
            "RX COLUNA LOMBAR": 1.5,
            
            # Tomografia Computadorizada (mSv)
            "TC CRANIO": 2.0,
            "TC TORAX": 7.0,
            "TC ABDOME": 8.0,
            "TC PELVE": 6.0,
            "TC COLUNA": 6.0,
            "TC CARDIAC": 16.0,
            
            # Mamografia (mSv)
            "MAMOGRAFIA": 0.4,
            
            # Sem radia√ß√£o ionizante
            "RESSONANCIA": 0.0,
            "ULTRASSOM": 0.0,
            "ELETROCARDIOGRAMA": 0.0,
            "DENSITOMETRIA": 0.01,
        }
        
        def estimar_dose_corrigida(exame):
            exame = str(exame).upper().strip()
            
            # Busca por palavras-chave mais espec√≠ficas
            for ref_exame, dose in dose_referencias.items():
                palavras_ref = ref_exame.split()
                if all(palavra in exame for palavra in palavras_ref if len(palavra) > 2):
                    return dose
            
            # Busca por categoria geral
            if "TC" in exame or "TOMOGRAFIA" in exame:
                return 5.0  # M√©dia geral para TC
            elif "RX" in exame or "RAIO" in exame:
                return 0.5  # M√©dia geral para RX
            elif "MAMO" in exame:
                return 0.4
            elif any(termo in exame for termo in ["RM", "RESSONANCIA", "US", "ULTRA", "ECG"]):
                return 0.0
            
            return 0.0
        
        d["DOSE_ESTIMADA"] = d["EXAME_NORM"].apply(estimar_dose_corrigida)
        
        # Features temporais
        d["ANO"] = d["DATA_REALIZACAO"].dt.year
        d["MES"] = d["DATA_REALIZACAO"].dt.month
        d["DIA_SEMANA"] = d["DATA_REALIZACAO"].dt.dayofweek  # 0=Segunda
        d["HORA"] = d["DATA_REALIZACAO"].dt.hour
        d["SEMANA_ANO"] = d["DATA_REALIZACAO"].dt.isocalendar().week
        
        # Per√≠odo do dia
        def classificar_periodo(hora):
            if pd.isna(hora):
                return "N√ÉO_INFORMADO"
            if 6 <= hora < 12:
                return "MANH√É"
            elif 12 <= hora < 18:
                return "TARDE"
            elif 18 <= hora < 24:
                return "NOITE"
            else:
                return "MADRUGADA"
        
        d["PERIODO_DIA"] = d["HORA"].apply(classificar_periodo).astype("category")
        
        # C√°lculo de tempo entre pedido e realiza√ß√£o
        if "DATA_PEDIDO" in d.columns:
            d["DELTA_PEDIDO_REALIZ"] = d["DATA_REALIZACAO"] - d["DATA_PEDIDO"]
            d["DELTA_HORAS"] = d["DELTA_PEDIDO_REALIZ"].dt.total_seconds() / 3600.0
            d["DELTA_DIAS"] = d["DELTA_PEDIDO_REALIZ"].dt.days
        
        return d

    # Processa os dados
    with st.spinner('‚öôÔ∏è Processando dados avan√ßados...'):
        df = advanced_preprocess(df_raw)
    
    st.success("‚úÖ **Pr√©-processamento conclu√≠do!**")

    # ---------------------------
    # Sidebar: Filtros Avan√ßados
    # ---------------------------
    st.sidebar.markdown("### üéõÔ∏è **Painel de Controle**")
    
    # Tema
    tema_escuro = st.sidebar.checkbox("üåì **Tema escuro**", value=False)
    template = "plotly_dark" if tema_escuro else "plotly_white"
    
    # Per√≠odo de an√°lise
    st.sidebar.markdown("#### üìÖ **Per√≠odo de An√°lise**")
    min_date = df["DATA_REALIZACAO"].dt.date.min()
    max_date = df["DATA_REALIZACAO"].dt.date.max()
    
    periodo_opcoes = {
        "√öltimo m√™s": 30,
        "√öltimos 3 meses": 90,
        "√öltimos 6 meses": 180,
        "√öltimo ano": 365,
        "Todo per√≠odo": None,
        "Personalizado": "custom"
    }
    
    periodo_selecionado = st.sidebar.selectbox("**Per√≠odo padr√£o**", list(periodo_opcoes.keys()), index=2)
    
    if periodo_selecionado == "Personalizado":
        data_inicio, data_fim = st.sidebar.date_input(
            "**Intervalo personalizado**", 
            [min_date, max_date], 
            min_value=min_date, 
            max_value=max_date
        )
    else:
        if periodo_opcoes[periodo_selecionado] is None:
            data_inicio, data_fim = min_date, max_date
        else:
            data_fim = max_date
            data_inicio = data_fim - timedelta(days=periodo_opcoes[periodo_selecionado])
    
    # Filtros de conte√∫do
    st.sidebar.markdown("#### üéØ **Filtros de Conte√∫do**")
    
    # Grupos de exame
    grupos_disponiveis = sorted(df["GRUPO_EXAME"].unique())
    grupos_selecionados = st.sidebar.multiselect(
        "**Grupos de exame**", 
        grupos_disponiveis, 
        default=grupos_disponiveis
    )
    
    # Per√≠odo do dia
    periodos_disponiveis = sorted(df["PERIODO_DIA"].unique())
    periodos_selecionados = st.sidebar.multiselect(
        "**Per√≠odos do dia**", 
        periodos_disponiveis, 
        default=periodos_disponiveis
    )
    
    # Filtros adicionais condicionais
    if col_mappings["ENCAM"]:
        encam_disponiveis = sorted(df[col_mappings["ENCAM"]].dropna().unique())
        encam_selecionados = st.sidebar.multiselect(
            "**Encaminhamentos**", 
            encam_disponiveis, 
            default=encam_disponiveis
        )
    else:
        encam_selecionados = []
    
    # Bot√£o reset
    if st.sidebar.button("üîÑ **Resetar todos os filtros**"):
        st.rerun()

    # Aplicar filtros
    df_filtered = df[
        (df["DATA_REALIZACAO"].dt.date >= data_inicio) &
        (df["DATA_REALIZACAO"].dt.date <= data_fim) &
        (df["GRUPO_EXAME"].isin(grupos_selecionados)) &
        (df["PERIODO_DIA"].isin(periodos_selecionados))
    ].copy()
    
    if encam_selecionados and col_mappings["ENCAM"]:
        df_filtered = df_filtered[df_filtered[col_mappings["ENCAM"]].isin(encam_selecionados)]
    
    # ---------------------------
    # Dashboard Principal em Tabs
    # ---------------------------
    
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìä **Vis√£o Geral**", 
        "‚è±Ô∏è **An√°lise Temporal**", 
        "üë• **Pacientes**", 
        "‚ò¢Ô∏è **Radioprote√ß√£o**", 
        "üìà **Analytics**"
    ])
    
    with tab1:
        st.markdown("### üìä **Vis√£o Geral do Centro**")
        
        # M√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        
        total_exames = len(df_filtered)
        total_pacientes = df_filtered["PACIENTE_ID"].nunique()
        exames_por_paciente = total_exames / total_pacientes if total_pacientes > 0 else 0
        dias_periodo = (data_fim - data_inicio).days + 1
        media_diaria = total_exames / dias_periodo
        
        with col1:
            st.markdown(create_advanced_metrics_card(
                "Total de Exames", 
                f"{total_exames:,}",
                f"No per√≠odo selecionado",
                color="#1f77b4"
            ), unsafe_allow_html=True)
        
        with col2:
            st.markdown(create_advanced_metrics_card(
                "Pacientes √önicos", 
                f"{total_pacientes:,}",
                f"Atendidos no per√≠odo",
                color="#2ca02c"
            ), unsafe_allow_html=True)
        
        with col3:
            st.markdown(create_advanced_metrics_card(
                "Exames/Paciente", 
                f"{exames_por_paciente:.1f}",
                f"M√©dia por paciente",
                color="#ff7f0e"
            ), unsafe_allow_html=True)
        
        with col4:
            st.markdown(create_advanced_metrics_card(
                "M√©dia Di√°ria", 
                f"{media_diaria:.1f}",
                f"Exames por dia",
                color="#d62728"
            ), unsafe_allow_html=True)
        
        # Insights autom√°ticos
        insights = generate_insights(df_filtered, "volume")
        if insights:
            st.markdown(f"""
            <div class="insight-box">
                <h4>üîç Insights Autom√°ticos</h4>
                {"<br>".join(insights)}
            </div>
            """, unsafe_allow_html=True)
        
        # Gr√°ficos principais
        col1, col2 = st.columns(2)
        
        with col1:
            # Distribui√ß√£o por grupo
            grupo_dist = df_filtered["GRUPO_EXAME"].value_counts().reset_index()
            grupo_dist.columns = ["Grupo", "Quantidade"]
            
            fig_grupo = px.pie(
                grupo_dist, 
                values="Quantidade", 
                names="Grupo",
                title="üìã **Distribui√ß√£o por Grupo de Exame**",
                template=template,
                hole=0.4
            )
            fig_grupo.update_traces(
                hovertemplate="<b>%{label}</b><br>Quantidade: %{value}<br>Percentual: %{percent}<extra></extra>"
            )
            st.plotly_chart(fig_grupo, use_container_width=True)
        
        with col2:
            # Top 10 exames
            top_exames = df_filtered["EXAME_NORM"].value_counts().head(10).reset_index()
            top_exames.columns = ["Exame", "Quantidade"]
            
            fig_top = px.bar(
                top_exames,
                x="Quantidade",
                y="Exame",
                orientation="h",
                title="üèÜ **Top 10 Exames Mais Realizados**",
                template=template
            )
            fig_top.update_layout(yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig_top, use_container_width=True)
        
        # Evolu√ß√£o temporal
        st.markdown("#### üìà **Evolu√ß√£o Temporal**")
        
        evolucao_diaria = (df_filtered.groupby(df_filtered["DATA_REALIZACAO"].dt.date)
                          .agg({
                              "PACIENTE_ID": ["size", "nunique"]
                          }))
        evolucao_diaria.columns = ["Total_Exames", "Pacientes_Unicos"]
        evolucao_diaria = evolucao_diaria.reset_index()
        
        # Initialize the figure (make sure this is done before adding traces)
        fig_evolucao = go.Figure()

        # Now you can safely add traces
        fig_evolucao.add_trace(
            go.Scatter(
                x=evolucao_diaria["DATA_REALIZACAO"],
                y=evolucao_diaria["Total_Exames"],
                mode="lines+markers",
                name="Exames",
                line=dict(color="#1f77b4", width=2)
            )
        )

        fig_evolucao.add_trace(
            go.Scatter(
                x=evolucao_diaria["DATA_REALIZACAO"],
                y=evolucao_diaria["Pacientes_Unicos"],
                mode="lines+markers",
                name="Pacientes",
                line=dict(color="#2ca02c", width=2)
            )
        )

        fig_evolucao.update_layout(
            height=500,
            template=template,
            title="üìÖ **Evolu√ß√£o Di√°ria do Centro**",
            showlegend=False
        )

        # Plot the chart
        st.plotly_chart(fig_evolucao, use_container_width=True)


    with tab2:
        st.markdown("### ‚è±Ô∏è **An√°lise Temporal Detalhada**")
        
        # An√°lise de tempo de espera (se dispon√≠vel)
        if "DELTA_HORAS" in df_filtered.columns and not df_filtered["DELTA_HORAS"].isna().all():
            # Remove outliers extremos para an√°lise mais realista
            df_tempo = df_filtered[df_filtered["DELTA_HORAS"] > 0].copy()
            Q1 = df_tempo["DELTA_HORAS"].quantile(0.25)
            Q3 = df_tempo["DELTA_HORAS"].quantile(0.75)
            IQR = Q3 - Q1
            filtro_outliers = (
                (df_tempo["DELTA_HORAS"] >= Q1 - 1.5 * IQR) &
                (df_tempo["DELTA_HORAS"] <= Q3 + 1.5 * IQR)
            )
            df_tempo = df_tempo[filtro_outliers].copy()
            
            # M√©tricas de tempo mais relevantes
            tempo_mediano = df_tempo["DELTA_HORAS"].median()
            tempo_media = df_tempo["DELTA_HORAS"].mean()
            tempo_p95 = df_tempo["DELTA_HORAS"].quantile(0.95)
            tempo_max = df_tempo["DELTA_HORAS"].max()
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(create_advanced_metrics_card(
                    "Tempo Mediano", 
                    format_duration(tempo_mediano),
                    "50% dos exames",
                    color="#2ca02c"
                ), unsafe_allow_html=True)
            
            with col2:
                st.markdown(create_advanced_metrics_card(
                    "Tempo M√©dio", 
                    format_duration(tempo_media),
                    "M√©dia geral",
                    color="#ff7f0e"
                ), unsafe_allow_html=True)
            
            with col3:
                st.markdown(create_advanced_metrics_card(
                    "Percentil 95", 
                    format_duration(tempo_p95),
                    "95% dos exames",
                    color="#d62728"
                ), unsafe_allow_html=True)
            
            with col4:
                st.markdown(create_advanced_metrics_card(
                    "Tempo M√°ximo", 
                    format_duration(tempo_max),
                    "Maior espera",
                    color="#9467bd"
                ), unsafe_allow_html=True)
            
            # An√°lise di√°ria de tempos de espera
            st.markdown("#### üìä **An√°lise Di√°ria de Tempos de Espera**")
            
            # Tempo m√©dio por dia
            tempo_diario = df_tempo.groupby(df_tempo["DATA_REALIZACAO"].dt.date).agg({
                "DELTA_HORAS": ["median", "mean", "max", "count"]
            }).round(2)
            
            tempo_diario.columns = ["Mediana", "Media", "Maximo", "Quantidade"]
            tempo_diario = tempo_diario.reset_index()
            
            # Tempo mediano por grupo por dia
            tempo_grupo_dia = df_tempo.groupby([
                df_tempo["DATA_REALIZACAO"].dt.date, 
                "GRUPO_EXAME"
            ])["DELTA_HORAS"].median().reset_index()
            
            # Gr√°ficos de an√°lise temporal
            col1, col2 = st.columns(2)
            
            with col1:
                # Evolu√ß√£o da mediana di√°ria
                fig_tempo_dia = px.line(
                    tempo_diario,
                    x="DATA_REALIZACAO",
                    y="Mediana",
                    title="üìà **Mediana de Espera por Dia**",
                    template=template,
                    labels={"Mediana": "Tempo Mediano (horas)", "DATA_REALIZACAO": "Data"}
                )
                
                # Adicionar m√©dia geral como linha de refer√™ncia
                fig_tempo_dia.add_hline(
                    y=tempo_mediano, 
                    line_dash="dash", 
                    line_color="red", 
                    annotation_text=f"Mediana Geral: {format_duration(tempo_mediano)}"
                )
                
                st.plotly_chart(fig_tempo_dia, use_container_width=True)
            
            with col2:
                # Tempo m√°ximo por dia (paciente com maior espera)
                fig_max_dia = px.line(
                    tempo_diario,
                    x="DATA_REALIZACAO",
                    y="Maximo",
                    title="‚è∞ **Maior Tempo de Espera por Dia**",
                    template=template,
                    labels={"Maximo": "Tempo M√°ximo (horas)", "DATA_REALIZACAO": "Data"}
                )
                
                st.plotly_chart(fig_max_dia, use_container_width=True)
            
            # Mediana de espera por grupo
            mediana_grupo = df_tempo.groupby("GRUPO_EXAME")["DELTA_HORAS"].agg([
                "median", "mean", "max", "count"
            ]).round(2)
            mediana_grupo.columns = ["Mediana_h", "Media_h", "Maximo_h", "Quantidade"]
            mediana_grupo = mediana_grupo.sort_values("Mediana_h", ascending=True).reset_index()
            
            fig_grupo_tempo = px.bar(
                mediana_grupo,
                x="Mediana_h",
                y="GRUPO_EXAME",
                orientation="h",
                title="üìä **Tempo Mediano de Espera por Grupo**",
                template=template,
                labels={"Mediana_h": "Tempo Mediano (horas)", "GRUPO_EXAME": "Grupo"}
            )
            fig_grupo_tempo.update_layout(yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig_grupo_tempo, use_container_width=True)
            
            # Tabela detalhada com pacientes de maior espera por dia
            st.markdown("#### üìã **Pacientes com Maior Tempo de Espera por Dia**")
            
            # Identificar o paciente com maior tempo de espera por dia
            pacientes_max_espera = df_tempo.loc[
                df_tempo.groupby(df_tempo["DATA_REALIZACAO"].dt.date)["DELTA_HORAS"].idxmax()
            ][["DATA_REALIZACAO", "PACIENTE_ID", "EXAME_NORM", "DELTA_HORAS"]].copy()
            
            pacientes_max_espera["DATA"] = pacientes_max_espera["DATA_REALIZACAO"].dt.date
            pacientes_max_espera["TEMPO_FORMATADO"] = pacientes_max_espera["DELTA_HORAS"].apply(format_duration)
            
            tabela_max_espera = pacientes_max_espera[[
                "DATA", "PACIENTE_ID", "EXAME_NORM", "TEMPO_FORMATADO"
            ]].sort_values("DATA", ascending=False)
            tabela_max_espera.columns = ["Data", "Paciente", "Exame", "Tempo de Espera"]
            
            st.dataframe(tabela_max_espera.head(20), use_container_width=True)
            st.caption("Mostrando os 20 dias mais recentes")
            
            # An√°lise mensal de tempos
            st.markdown("#### üìÖ **An√°lise Mensal de Tempos de Espera**")
            
            df_tempo["Ano_Mes"] = df_tempo["DATA_REALIZACAO"].dt.to_period("M")
            tempo_mensal = df_tempo.groupby("Ano_Mes")["DELTA_HORAS"].agg([
                "median", "mean", "count"
            ]).round(2)
            tempo_mensal.columns = ["Mediana_h", "Media_h", "Quantidade"]
            tempo_mensal = tempo_mensal.reset_index()
            tempo_mensal["Ano_Mes_str"] = tempo_mensal["Ano_Mes"].astype(str)
            
            col1, col2 = st.columns(2)
            
            with col1:
                fig_mensal = px.line(
                    tempo_mensal,
                    x="Ano_Mes_str",
                    y="Mediana_h",
                    title="üìà **Evolu√ß√£o Mensal - Tempo Mediano**",
                    template=template,
                    labels={"Mediana_h": "Tempo Mediano (horas)", "Ano_Mes_str": "M√™s"}
                )
                st.plotly_chart(fig_mensal, use_container_width=True)
            
            with col2:
                # Tabela resumo mensal
                st.markdown("**üìä Resumo Mensal**")
                tempo_mensal_display = tempo_mensal.copy()
                tempo_mensal_display["Mediana_Formatada"] = tempo_mensal_display["Mediana_h"].apply(format_duration)
                tempo_mensal_display["Media_Formatada"] = tempo_mensal_display["Media_h"].apply(format_duration)
                
                resumo_mensal = tempo_mensal_display[[
                    "Ano_Mes_str", "Mediana_Formatada", "Media_Formatada", "Quantidade"
                ]]
                resumo_mensal.columns = ["M√™s", "Mediana", "M√©dia", "Exames"]
                st.dataframe(resumo_mensal, use_container_width=True)
            
            # Insights temporais
            insights_tempo = generate_insights(df_filtered, "temporal")
            if insights_tempo:
                st.markdown(f"""
                <div class="insight-box">
                    <h4>‚è∞ Insights Temporais</h4>
                    {"<br>".join(insights_tempo)}
                </div>
                """, unsafe_allow_html=True)
        
        else:
            st.warning("‚ö†Ô∏è **An√°lise temporal n√£o dispon√≠vel**: N√£o foram encontradas colunas de data de pedido para calcular tempos de espera.")
        
        # An√°lise de sazonalidade
        st.markdown("#### üìÖ **An√°lise de Sazonalidade**")
        
        # Heatmap por hora e dia da semana
        df_heatmap = df_filtered.groupby(["DIA_SEMANA", "HORA"]).size().reset_index(name="Quantidade")
        
        # Criar matriz para heatmap
        heatmap_matrix = df_heatmap.pivot(index="DIA_SEMANA", columns="HORA", values="Quantidade").fillna(0)
        
        # Labels dos dias da semana
        dias_semana = ["Segunda", "Ter√ßa", "Quarta", "Quinta", "Sexta", "S√°bado", "Domingo"]
        heatmap_matrix.index = [dias_semana[i] for i in heatmap_matrix.index]
        
        fig_heatmap = px.imshow(
            heatmap_matrix,
            title="üî• **Heatmap: Exames por Hora e Dia da Semana**",
            template=template,
            aspect="auto",
            color_continuous_scale="Blues"
        )
        fig_heatmap.update_layout(
            xaxis_title="Hora do Dia",
            yaxis_title="Dia da Semana"
        )
        
        st.plotly_chart(fig_heatmap, use_container_width=True)
        
        # An√°lise por per√≠odo do dia
        col1, col2 = st.columns(2)
        
        with col1:
            periodo_dist = df_filtered["PERIODO_DIA"].value_counts().reset_index()
            periodo_dist.columns = ["Per√≠odo", "Quantidade"]
            
            fig_periodo = px.bar(
                periodo_dist,
                x="Per√≠odo",
                y="Quantidade",
                title="üåÖ **Distribui√ß√£o por Per√≠odo do Dia**",
                template=template,
                color="Quantidade",
                color_continuous_scale="viridis"
            )
            st.plotly_chart(fig_periodo, use_container_width=True)
        
        with col2:
            # An√°lise mensal
            df_mensal = df_filtered.copy()
            df_mensal["Mes_Nome"] = df_mensal["DATA_REALIZACAO"].dt.strftime("%B")
            mensal_dist = df_mensal["Mes_Nome"].value_counts().reset_index()
            mensal_dist.columns = ["M√™s", "Quantidade"]
            
            fig_mensal = px.bar(
                mensal_dist,
                x="M√™s",
                y="Quantidade",
                title="üìÖ **Distribui√ß√£o Mensal**",
                template=template,
                color="Quantidade",
                color_continuous_scale="plasma"
            )
            fig_mensal.update_xaxes(tickangle=45)
            st.plotly_chart(fig_mensal, use_container_width=True)
    
    with tab3:
        st.markdown("### üë• **An√°lise de Pacientes**")
        
        # An√°lise de reincid√™ncia
        reincidencia = df_filtered.groupby("PACIENTE_ID").agg({
            "DATA_REALIZACAO": ["count", "nunique", lambda x: (x.max()-x.min()).days],
            "EXAME_NORM": lambda x: x.mode().iloc[0] if not x.empty else "N/A",
            "GRUPO_EXAME": "nunique"
        }).round(2)
        
        reincidencia.columns = ["Total_Exames", "Dias_Distintos", "Periodo_Dias", "Exame_Mais_Comum", "Grupos_Diferentes"]
        reincidencia = reincidencia.reset_index()
        
        # M√©tricas de pacientes
        col1, col2, col3, col4 = st.columns(4)
        
        pacientes_recorrentes = len(reincidencia[reincidencia["Total_Exames"] > 1])
        taxa_reincidencia = (pacientes_recorrentes / len(reincidencia)) * 100 if len(reincidencia) > 0 else 0
        media_exames_paciente = reincidencia["Total_Exames"].mean()
        max_exames_paciente = reincidencia["Total_Exames"].max()
        
        with col1:
            st.markdown(create_advanced_metrics_card(
                "Pacientes Recorrentes", 
                f"{pacientes_recorrentes:,}",
                f"Com mais de 1 exame",
                color="#9467bd"
            ), unsafe_allow_html=True)
        
        with col2:
            st.markdown(create_advanced_metrics_card(
                "Taxa de Reincid√™ncia", 
                f"{taxa_reincidencia:.1f}%",
                f"Pacientes que retornaram",
                color="#8c564b"
            ), unsafe_allow_html=True)
        
        with col3:
            st.markdown(create_advanced_metrics_card(
                "M√©dia Exames/Paciente", 
                f"{media_exames_paciente:.1f}",
                f"Por paciente no per√≠odo",
                color="#e377c2"
            ), unsafe_allow_html=True)
        
        with col4:
            st.markdown(create_advanced_metrics_card(
                "M√°x Exames/Paciente", 
                f"{max_exames_paciente:,}",
                f"Paciente com mais exames",
                color="#17becf"
            ), unsafe_allow_html=True)
        
        # Gr√°ficos de pacientes
        col1, col2 = st.columns(2)
        
        with col1:
            # Distribui√ß√£o de exames por paciente
            dist_exames = reincidencia["Total_Exames"].value_counts().sort_index().reset_index()
            dist_exames.columns = ["Num_Exames", "Num_Pacientes"]
            
            fig_dist = px.bar(
                dist_exames.head(10),  # Primeiros 10 para legibilidade
                x="Num_Exames",
                y="Num_Pacientes",
                title="üìä **Distribui√ß√£o: N√∫mero de Exames por Paciente**",
                template=template,
                labels={"Num_Exames": "N√∫mero de Exames", "Num_Pacientes": "N√∫mero de Pacientes"}
            )
            st.plotly_chart(fig_dist, use_container_width=True)
        
        with col2:
            # Top pacientes com mais exames
            top_pacientes = reincidencia.nlargest(15, "Total_Exames")[["PACIENTE_ID", "Total_Exames", "Exame_Mais_Comum"]]
            
            fig_top_pac = px.bar(
                top_pacientes,
                x="Total_Exames",
                y="PACIENTE_ID",
                orientation="h",
                title="üèÜ **Top 15 Pacientes por N√∫mero de Exames**",
                template=template,
                hover_data=["Exame_Mais_Comum"]
            )
            fig_top_pac.update_layout(yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig_top_pac, use_container_width=True)
        
        # An√°lise de jornada do paciente
        st.markdown("#### üõ§Ô∏è **Jornada dos Pacientes**")
        
        # Tabela detalhada de reincid√™ncia
        st.markdown("**üìã Tabela Detalhada de Pacientes**")
        
        # Filtros para a tabela
        col_filtro1, col_filtro2 = st.columns(2)
        with col_filtro1:
            min_exames = st.number_input("M√≠nimo de exames", min_value=1, value=1, max_value=int(max_exames_paciente))
        with col_filtro2:
            max_registros = st.number_input("M√°ximo de registros exibidos", min_value=10, value=100, max_value=1000)
        
        tabela_filtrada = reincidencia[reincidencia["Total_Exames"] >= min_exames].head(max_registros)
        st.dataframe(tabela_filtrada, use_container_width=True)
        
        # Export
        csv = tabela_filtrada.to_csv(index=False).encode('utf-8')
        st.download_button(
            "üì• **Baixar An√°lise de Pacientes (CSV)**",
            csv,
            "analise_pacientes.csv",
            "text/csv"
        )
    
    with tab4:
        st.markdown("### ‚ò¢Ô∏è **An√°lise de Radioprote√ß√£o**")
        
        # M√©tricas de dose
        dose_total = df_filtered["DOSE_ESTIMADA"].sum()
        dose_media_exame = df_filtered["DOSE_ESTIMADA"].mean()
        dose_media_paciente = df_filtered.groupby("PACIENTE_ID")["DOSE_ESTIMADA"].sum().mean()
        exames_com_dose = len(df_filtered[df_filtered["DOSE_ESTIMADA"] > 0])
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(create_advanced_metrics_card(
                "Dose Total Estimada", 
                f"{dose_total:.2f} mSv",
                f"Soma de todos os exames",
                color="#ff6b6b"
            ), unsafe_allow_html=True)
        
        with col2:
            st.markdown(create_advanced_metrics_card(
                "Dose M√©dia/Exame", 
                f"{dose_media_exame:.3f} mSv",
                f"Por exame realizado",
                color="#ffa726"
            ), unsafe_allow_html=True)
        
        with col3:
            st.markdown(create_advanced_metrics_card(
                "Dose M√©dia/Paciente", 
                f"{dose_media_paciente:.2f} mSv",
                f"Por paciente no per√≠odo",
                color="#ffca28"
            ), unsafe_allow_html=True)
        
        with col4:
            st.markdown(create_advanced_metrics_card(
                "Exames com Radia√ß√£o", 
                f"{exames_com_dose:,}",
                f"De {total_exames:,} total",
                color="#ef5350"
            ), unsafe_allow_html=True)
        
        # Refer√™ncias de dose
        st.markdown("""
        <div class="dose-reference">
            <h4>üìö Refer√™ncias para Estimativa de Dose</h4>
            <p><strong>Base de C√°lculo:</strong> ICRP 103 (2007) e NCRP 160 (2009)</p>
            <p><strong>Doses T√≠picas:</strong></p>
            <ul>
                <li><strong>RX T√≥rax:</strong> 0.1 mSv</li>
                <li><strong>RX Abdome:</strong> 0.7 mSv</li>
                <li><strong>TC T√≥rax:</strong> 7.0 mSv</li>
                <li><strong>TC Abdome:</strong> 8.0 mSv</li>
                <li><strong>Mamografia:</strong> 0.4 mSv</li>
            </ul>
            <p><strong>Nota:</strong> Valores s√£o estimativas baseadas em protocolos padr√£o. Doses reais podem variar conforme equipamento e protocolo utilizado.</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Alertas de radioprote√ß√£o
        dose_paciente = df_filtered.groupby("PACIENTE_ID")["DOSE_ESTIMADA"].sum()
        
        # Limites de refer√™ncia (valores educativos)
        limite_anual_publico = 1.0  # mSv/ano para p√∫blico geral
        limite_investigacao = 20.0  # mSv - n√≠vel de investiga√ß√£o
        
        pacientes_acima_limite = dose_paciente[dose_paciente > limite_anual_publico]
        pacientes_investigacao = dose_paciente[dose_paciente > limite_investigacao]
        
        if len(pacientes_acima_limite) > 0:
            st.markdown(f"""
            <div class="warning-box">
                <h4>‚ö†Ô∏è Aten√ß√£o - Radioprote√ß√£o</h4>
                <p><strong>{len(pacientes_acima_limite)} pacientes</strong> receberam dose estimada superior a {limite_anual_publico} mSv (limite anual para p√∫blico).</p>
                {f"<p><strong>{len(pacientes_investigacao)} pacientes</strong> requerem investiga√ß√£o (> {limite_investigacao} mSv).</p>" if len(pacientes_investigacao) > 0 else ""}
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="success-box">
                <h4>‚úÖ Radioprote√ß√£o</h4>
                <p>Todos os pacientes est√£o dentro dos limites de refer√™ncia (< {limite_anual_publico} mSv).</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Gr√°ficos de dose
        col1, col2 = st.columns(2)
        
        with col1:
            # Dose por grupo de exame
            dose_grupo = df_filtered.groupby("GRUPO_EXAME")["DOSE_ESTIMADA"].sum().reset_index()
            dose_grupo = dose_grupo.sort_values("DOSE_ESTIMADA", ascending=False)
            
            fig_dose_grupo = px.bar(
                dose_grupo,
                x="DOSE_ESTIMADA",
                y="GRUPO_EXAME",
                orientation="h",
                title="‚ò¢Ô∏è **Dose Total por Grupo de Exame**",
                template=template,
                labels={"DOSE_ESTIMADA": "Dose Total (mSv)", "GRUPO_EXAME": "Grupo"}
            )
            fig_dose_grupo.update_layout(yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig_dose_grupo, use_container_width=True)
        
        with col2:
            # Top exames por dose individual
            dose_exame = df_filtered.groupby("EXAME_NORM")["DOSE_ESTIMADA"].agg(["mean", "sum", "count"]).reset_index()
            dose_exame.columns = ["Exame", "Dose_Media", "Dose_Total", "Quantidade"]
            dose_exame = dose_exame[dose_exame["Dose_Media"] > 0].nlargest(10, "Dose_Media")
            
            fig_dose_exame = px.scatter(
                dose_exame,
                x="Quantidade",
                y="Dose_Media",
                size="Dose_Total",
                hover_name="Exame",
                title="üéØ **Dose M√©dia vs Quantidade (bolha = dose total)**",
                template=template,
                labels={"Dose_Media": "Dose M√©dia (mSv)", "Quantidade": "N√∫mero de Exames"}
            )
            st.plotly_chart(fig_dose_exame, use_container_width=True)
        
        # Evolu√ß√£o temporal da dose
        dose_diaria = df_filtered.groupby(df_filtered["DATA_REALIZACAO"].dt.date)["DOSE_ESTIMADA"].sum().reset_index()
        dose_diaria.columns = ["Data", "Dose_Diaria"]
        
        fig_dose_tempo = px.line(
            dose_diaria,
            x="Data",
            y="Dose_Diaria",
            title="üìà **Evolu√ß√£o Di√°ria da Dose Total Estimada**",
            template=template,
            labels={"Dose_Diaria": "Dose Di√°ria (mSv)", "Data": "Data"}
        )
        
        # Adicionar m√©dia m√≥vel de 7 dias
        dose_diaria["Media_Movel_7d"] = dose_diaria["Dose_Diaria"].rolling(window=7, center=True).mean()
        fig_dose_tempo.add_trace(
            go.Scatter(
                x=dose_diaria["Data"],
                y=dose_diaria["Media_Movel_7d"],
                mode="lines",
                name="M√©dia M√≥vel 7 dias",
                line=dict(dash="dash", color="red")
            )
        )
        
        st.plotly_chart(fig_dose_tempo, use_container_width=True)
        
        # Tabela de pacientes com maior dose
        if len(pacientes_acima_limite) > 0:
            st.markdown("#### üö® **Pacientes com Dose Elevada**")
            tabela_dose_alta = pacientes_acima_limite.reset_index()
            tabela_dose_alta.columns = ["Paciente", "Dose_Total_mSv"]
            tabela_dose_alta = tabela_dose_alta.sort_values("Dose_Total_mSv", ascending=False)
            
            st.dataframe(tabela_dose_alta, use_container_width=True)
            
            csv_dose = tabela_dose_alta.to_csv(index=False).encode('utf-8')
            st.download_button(
                "üì• **Baixar Lista de Pacientes - Dose Elevada (CSV)**",
                csv_dose,
                "pacientes_dose_elevada.csv",
                "text/csv"
            )
    
    with tab5:
        st.markdown("### üìà **Analytics Avan√ßado**")
        
        # An√°lise de correla√ß√µes
        st.markdown("#### üîó **An√°lise de Correla√ß√µes**")
        
        # Preparar dados num√©ricos para correla√ß√£o
        df_corr = df_filtered.select_dtypes(include=[np.number])
        
        if len(df_corr.columns) > 1:
            corr_matrix = df_corr.corr()
            
            fig_corr = px.imshow(
                corr_matrix,
                title="üîó **Matriz de Correla√ß√£o**",
                template=template,
                color_continuous_scale="RdBu",
                aspect="auto"
            )
            st.plotly_chart(fig_corr, use_container_width=True)
        
        # An√°lise de tend√™ncias
        st.markdown("#### üìä **An√°lise de Tend√™ncias**")
        
        # Crescimento mensal
        df_mensal_analytics = df_filtered.copy()
        df_mensal_analytics["Ano_Mes"] = df_mensal_analytics["DATA_REALIZACAO"].dt.to_period("M")
        
        # Verifique se a coluna 'Ano_Mes' existe, caso contr√°rio, crie-a
        df_filtered['Ano_Mes'] = df_filtered['DATA_REALIZACAO'].dt.to_period('M')

        # Agora, podemos agrupar os dados corretamente
        # -----------------------------------------
        tendencia_mensal = (
            df_filtered
            .groupby(df_filtered["DATA_REALIZACAO"].dt.to_period("M"))
            .agg(
                Total_Exames       = ("PACIENTE_ID", "size"),
                Pacientes_Unicos   = ("PACIENTE_ID", "nunique"),
                Dose_Total         = ("DOSE_ESTIMADA", "sum"),
            )
            .reset_index()
            .rename(columns={"DATA_REALIZACAO": "Ano_Mes"})
        )

        # Agora calcula as taxas de crescimento
        tendencia_mensal["Crescimento_Exames"]   = tendencia_mensal["Total_Exames"].pct_change() * 100
        tendencia_mensal["Crescimento_Pacientes"] = tendencia_mensal["Pacientes_Unicos"].pct_change() * 100


    # -----------------------------------------
    # 2) REFACTOR EM Tab2: M√âTRICAS DE ESPERA
    # -----------------------------------------

    with tab2:
        st.markdown("### ‚è±Ô∏è An√°lise Temporal Detalhada")

        if "DELTA_HORAS" in df_filtered.columns and not df_filtered["DELTA_HORAS"].isna().all():
            df_tempo = df_filtered[df_filtered["DELTA_HORAS"] > 0].copy()

            # 2.1 Mediana de espera por dia (toda a frota)
            mediana_diaria = (
                df_tempo
                .groupby(df_tempo["DATA_REALIZACAO"].dt.date)["DELTA_HORAS"]
                .median()
                .reset_index(name="Mediana_h")
            )
            mediana_diaria["Mediana_Formatada"] = mediana_diaria["Mediana_h"].apply(format_duration)

            fig_mediana = px.line(
                mediana_diaria,
                x="DATA_REALIZACAO",
                y="Mediana_h",
                title="üìà Mediana Di√°ria de Tempo de Espera",
                labels={"Mediana_h": "Horas", "DATA_REALIZACAO": "Data"},
                template=template
            )
            fig_mediana.add_hline(
                y=mediana_diaria["Mediana_h"].mean(),
                line_dash="dash", line_color="red",
                annotation_text=f"M√©dia Geral: {format_duration(mediana_diaria['Mediana_h'].mean())}"
            )
            st.plotly_chart(fig_mediana, use_container_width=True)

            # 2.2 M√°ximo de espera por dia e tabela de pacientes
            max_diaria = (
                df_tempo
                .groupby(df_tempo["DATA_REALIZACAO"].dt.date)["DELTA_HORAS"]
                .max()
                .reset_index(name="Maximo_h")
            )
            max_diaria["Maximo_Formatado"] = max_diaria["Maximo_h"].apply(format_duration)

            fig_max = px.line(
                max_diaria,
                x="DATA_REALIZACAO",
                y="Maximo_h",
                title="‚è∞ Maior Tempo de Espera por Dia",
                labels={"Maximo_h": "Horas", "DATA_REALIZACAO": "Data"},
                template=template
            )
            st.plotly_chart(fig_max, use_container_width=True)

            # Tabela com data, paciente e exame que teve a maior espera
            pacientes_max = (
                df_tempo
                .loc[df_tempo.groupby(df_tempo["DATA_REALIZACAO"].dt.date)["DELTA_HORAS"].idxmax()]
                [["DATA_REALIZACAO", "PACIENTE_ID", "EXAME_NORM", "DELTA_HORAS"]]
            )
            pacientes_max["DATA"]          = pacientes_max["DATA_REALIZACAO"].dt.date
            pacientes_max["TEMPO_FORMATADO"] = pacientes_max["DELTA_HORAS"].apply(format_duration)

            tabela_max = pacientes_max[["DATA", "PACIENTE_ID", "EXAME_NORM", "TEMPO_FORMATADO"]]
            tabela_max.columns = ["Data", "Paciente", "Exame", "Tempo de Espera"]
            st.markdown("#### üìã Pacientes com Maior Tempo de Espera por Dia")
            st.dataframe(tabela_max.sort_values("Data", ascending=False), use_container_width=True)


            # 2.3 M√©trica global e mensal de espera
            espera_global   = df_tempo["DELTA_HORAS"].mean()
            st.markdown(f"**‚è≥ Tempo M√©dio Global de Espera:** {format_duration(espera_global)}")

            espera_mensal = (
                df_tempo
                .groupby(df_tempo["DATA_REALIZACAO"].dt.to_period("M"))["DELTA_HORAS"]
                .mean()
                .reset_index(name="Media_h")
            )
            espera_mensal["Media_Formatada"] = espera_mensal["Media_h"].apply(format_duration)
            espera_mensal["Mes"] = espera_mensal["DATA_REALIZACAO"].astype(str)

            fig_espera_mes = px.bar(
                espera_mensal,
                x="Mes", y="Media_h",
                title="üìÖ M√©dia Mensal de Espera",
                labels={"Media_h": "Horas", "Mes": "M√™s"},
                template=template
            )
            st.plotly_chart(fig_espera_mes, use_container_width=True)

        else:
            st.warning("‚ö†Ô∏è N√£o h√° DELTA_HORAS para an√°lise temporal.")

        # -----------------------------------------
        # 3) RODAP√â DE REFER√äNCIA EM Gr√°fico de Dose
        # -----------------------------------------

        # Depois de criar fig_dose_tempo:
        fig_dose_tempo.update_layout(
            annotations=[
                dict(
                    text=(
                         "Estimativas de dose: ICRP 103 (2007) & NCRP 160 (2009); "
                         "m√©dias gerais: RX 0.5 mSv, TC 5 mSv"
                    ),
                    xref="paper", yref="paper",
                    x=0, y=-0.15,
                    showarrow=False,
                    font=dict(size=10, color="gray"),
                    align="left"
                )
           ]
        )
        st.plotly_chart(fig_dose_tempo, use_container_width=True)

        # Certifique-se de que o DataFrame tem 3 colunas antes de renome√°-las
        if tendencia_mensal.shape[1] == 3:
            tendencia_mensal.columns = ["Ano_Mes", "Total_Exames", "Pacientes_Unicos", "Dose_Total"]
        else:
            st.error("Erro: o DataFrame n√£o possui o n√∫mero correto de colunas.")
            st.stop()

        # Calcular a taxa de crescimento
        tendencia_mensal["Crescimento_Exames"] = tendencia_mensal["Total_Exames"].pct_change() * 100
        tendencia_mensal["Crescimento_Pacientes"] = tendencia_mensal["Pacientes_Unicos"].pct_change() * 100

        # Gr√°ficos de tend√™ncia mensal
        fig_tendencia = make_subplots(
            rows=2, cols=2,
            subplot_titles=("Exames por M√™s", "Pacientes √önicos por M√™s", "Crescimento % Exames", "Dose Total por M√™s"),
            specs=[[{"secondary_y": False}, {"secondary_y": False}],
                   [{"secondary_y": False}, {"secondary_y": False}]]
        )

        # Exames por m√™s
        fig_tendencia.add_trace(
            go.Scatter(x=tendencia_mensal["Ano_Mes"].astype(str), y=tendencia_mensal["Total_Exames"], 
                      mode="lines+markers", name="Exames"),
            row=1, col=1
        )

        # Pacientes por m√™s
        fig_tendencia.add_trace(
            go.Scatter(x=tendencia_mensal["Ano_Mes"].astype(str), y=tendencia_mensal["Pacientes_Unicos"], 
                      mode="lines+markers", name="Pacientes"),
            row=1, col=2
        )

        # Crescimento
        fig_tendencia.add_trace(
            go.Bar(x=tendencia_mensal["Ano_Mes"].astype(str), y=tendencia_mensal["Crescimento_Exames"], 
                  name="Crescimento %"),
            row=2, col=1
        )

        # Dose total
        fig_tendencia.add_trace(
            go.Scatter(x=tendencia_mensal["Ano_Mes"].astype(str), y=tendencia_mensal["Dose_Total"], 
                      mode="lines+markers", name="Dose"),
            row=2, col=2
        )

        fig_tendencia.update_layout(
            height=600,
            template="plotly_white",
            title="üìà **Dashboard de Tend√™ncias Mensais**",
            showlegend=False
        )

        st.plotly_chart(fig_tendencia, use_container_width=True)

        # Previs√£o simples usando m√©dia m√≥vel
        st.markdown("#### üîÆ **Previs√£o Simples (Pr√≥ximo M√™s)**")
        
        if len(tendencia_mensal) >= 3:
            # M√©dia m√≥vel dos √∫ltimos 3 meses
            ultimos_3_meses = tendencia_mensal.tail(3)["Total_Exames"].mean()
            crescimento_medio = tendencia_mensal.tail(3)["Crescimento_Exames"].mean()
            
            previsao_proximo_mes = ultimos_3_meses * (1 + crescimento_medio/100)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown(create_advanced_metrics_card(
                    "Previs√£o Pr√≥ximo M√™s", 
                    f"{previsao_proximo_mes:.0f}",
                    f"Exames estimados",
                    delta=crescimento_medio,
                    color="#9c27b0"
                ), unsafe_allow_html=True)
            
            with col2:
                st.markdown(create_advanced_metrics_card(
                    "M√©dia √öltimos 3 Meses", 
                    f"{ultimos_3_meses:.0f}",
                    f"Exames por m√™s",
                    color="#673ab7"
                ), unsafe_allow_html=True)
            
            with col3:
                st.markdown(create_advanced_metrics_card(
                    "Crescimento M√©dio", 
                    f"{crescimento_medio:+.1f}%",
                    f"√öltimos 3 meses",
                    color="#3f51b5"
                ), unsafe_allow_html=True)
        
        # An√°lise de efici√™ncia operacional
        st.markdown("#### ‚öôÔ∏è **Efici√™ncia Operacional**")
        
        insights_eficiencia = generate_insights(df_filtered, "efficiency")
        
        # An√°lise de capacidade
        capacidade_diaria = df_filtered.groupby(df_filtered["DATA_REALIZACAO"].dt.date).size()
        capacidade_maxima = capacidade_diaria.max()
        capacidade_media = capacidade_diaria.mean()
        utilizacao_media = (capacidade_media / capacidade_maxima) * 100
        
        dias_baixa_utilizacao = len(capacidade_diaria[capacidade_diaria < capacidade_media * 0.7])
        dias_alta_utilizacao = len(capacidade_diaria[capacidade_diaria > capacidade_media * 1.3])
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"""
            **üìä M√©tricas de Capacidade:**
            - **Capacidade m√°xima di√°ria:** {capacidade_maxima} exames
            - **M√©dia di√°ria:** {capacidade_media:.1f} exames  
            - **Utiliza√ß√£o m√©dia:** {utilizacao_media:.1f}%
            - **Dias de baixa utiliza√ß√£o:** {dias_baixa_utilizacao} ({(dias_baixa_utilizacao/len(capacidade_diaria)*100):.1f}%)
            - **Dias de alta utiliza√ß√£o:** {dias_alta_utilizacao} ({(dias_alta_utilizacao/len(capacidade_diaria)*100):.1f}%)
            """)
        
        with col2:
            if insights_eficiencia:
                st.markdown(f"""
                <div class="insight-box">
                    <h4>üí° Insights de Efici√™ncia</h4>
                    {"<br>".join(insights_eficiencia)}
                </div>
                """, unsafe_allow_html=True)
        
        # Gr√°fico de utiliza√ß√£o da capacidade
        utilizacao_diaria = (capacidade_diaria / capacidade_maxima * 100).reset_index()
        utilizacao_diaria.columns = ["Data", "Utilizacao_Percentual"]
        
        fig_utilizacao = px.line(
            utilizacao_diaria,
            x="Data",
            y="Utilizacao_Percentual",
            title="üìä **Utiliza√ß√£o da Capacidade Di√°ria (%)**",
            template=template
        )
        
        # Adicionar linhas de refer√™ncia
        fig_utilizacao.add_hline(y=70, line_dash="dash", line_color="orange", annotation_text="Baixa utiliza√ß√£o")
        fig_utilizacao.add_hline(y=100, line_dash="dash", line_color="green", annotation_text="Capacidade m√°xima")
        fig_utilizacao.add_hline(y=130, line_dash="dash", line_color="red", annotation_text="Sobrecarga")
        
        st.plotly_chart(fig_utilizacao, use_container_width=True)

    # ---------------------------
    # Se√ß√£o de Export Melhorada
    # ---------------------------
    st.markdown("---")
    st.markdown("### üìÑ **Exporta√ß√£o e Relat√≥rios**")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # CSV do dataset filtrado
        csv_data = df_filtered.to_csv(index=False).encode('utf-8')
        st.download_button(
            "üì• **Dados Filtrados (CSV)**",
            csv_data,
            "dados_radiologicos_filtrados.csv",
            "text/csv"
        )
    
    with col2:
        # Excel com m√∫ltiplas abas
        def create_excel_report():
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                # Aba principal com dados filtrados
                df_filtered.to_excel(writer, sheet_name='Dados_Filtrados', index=False)
                
                # Aba com resumo por grupo
                grupo_resumo = df_filtered.groupby('GRUPO_EXAME').agg({
                    'PACIENTE_ID': ['count', 'nunique'],
                    'DOSE_ESTIMADA': ['sum', 'mean'],
                    'DATA_REALIZACAO': ['min', 'max']
                }).round(2)
                grupo_resumo.columns = ['Total_Exames', 'Pacientes_Unicos', 'Dose_Total', 'Dose_Media', 'Data_Inicio', 'Data_Fim']
                grupo_resumo.to_excel(writer, sheet_name='Resumo_por_Grupo')
                
                # Aba com an√°lise de pacientes se dispon√≠vel
                if 'reincidencia' in locals():
                    reincidencia.to_excel(writer, sheet_name='Analise_Pacientes', index=False)
                
                # Aba com m√©tricas temporais se dispon√≠vel
                if 'DELTA_HORAS' in df_filtered.columns:
                    tempo_resumo = df_filtered.groupby('GRUPO_EXAME')['DELTA_HORAS'].agg(['mean', 'median', 'std']).round(2)
                    tempo_resumo.columns = ['Tempo_Medio_h', 'Tempo_Mediano_h', 'Desvio_Padrao_h']
                    tempo_resumo.to_excel(writer, sheet_name='Analise_Temporal')
                
                # Aba com dose por paciente
                dose_paciente_detalhada = df_filtered.groupby('PACIENTE_ID').agg({
                    'DOSE_ESTIMADA': 'sum',
                    'DATA_REALIZACAO': 'count',
                    'GRUPO_EXAME': lambda x: ', '.join(x.unique())
                }).round(2)
                dose_paciente_detalhada.columns = ['Dose_Total_mSv', 'Num_Exames', 'Grupos_Realizados']
                dose_paciente_detalhada.to_excel(writer, sheet_name='Dose_por_Paciente')
            
            output.seek(0)
            return output.getvalue()
        
        excel_data = create_excel_report()
        st.download_button(
            "üìä **Relat√≥rio Completo (Excel)**",
            excel_data,
            "relatorio_radiologico_completo.xlsx",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    
    with col3:
        # Resumo executivo
        def create_executive_summary():
            summary = f"""
# RELAT√ìRIO EXECUTIVO - CENTRO RADIOL√ìGICO

## üìä RESUMO DO PER√çODO
**Per√≠odo analisado:** {data_inicio} a {data_fim}
**Total de exames:** {total_exames:,}
**Pacientes √∫nicos:** {total_pacientes:,}
**M√©dia exames/paciente:** {exames_por_paciente:.1f}
**M√©dia di√°ria:** {media_diaria:.1f} exames

## üèÜ TOP 5 EXAMES MAIS REALIZADOS
"""
            top_5_exames = df_filtered['EXAME_NORM'].value_counts().head(5)
            for i, (exame, qtd) in enumerate(top_5_exames.items(), 1):
                pct = (qtd / total_exames) * 100
                summary += f"{i}. **{exame}**: {qtd:,} exames ({pct:.1f}%)\n"
            
            summary += f"""

## ‚ò¢Ô∏è RADIOPROTE√á√ÉO
**Dose total estimada:** {dose_total:.2f} mSv
**Dose m√©dia por exame:** {dose_media_exame:.3f} mSv
**Dose m√©dia por paciente:** {dose_media_paciente:.2f} mSv
**Exames com radia√ß√£o:** {exames_com_dose:,} de {total_exames:,}
"""
            
            if 'pacientes_acima_limite' in locals() and len(pacientes_acima_limite) > 0:
                summary += f"**‚ö†Ô∏è Pacientes acima limite (1mSv):** {len(pacientes_acima_limite)}\n"
            
            if 'DELTA_HORAS' in df_filtered.columns and not df_filtered['DELTA_HORAS'].isna().all():
                tempo_medio_geral = df_filtered['DELTA_HORAS'].mean()
                summary += f"""

## ‚è±Ô∏è TEMPO DE RESPOSTA
**Tempo m√©dio pedido‚Üírealiza√ß√£o:** {tempo_medio_geral:.1f} horas
**Tempo mediano:** {df_filtered['DELTA_HORAS'].median():.1f} horas
"""
            
            summary += f"""

## üìà DISTRIBUI√á√ÉO POR GRUPO
"""
            dist_grupos = df_filtered['GRUPO_EXAME'].value_counts()
            for grupo, qtd in dist_grupos.items():
                pct = (qtd / total_exames) * 100
                summary += f"- **{grupo}**: {qtd:,} exames ({pct:.1f}%)\n"
            
            summary += f"""

## üéØ INSIGHTS E RECOMENDA√á√ïES
"""
            # Adiciona insights autom√°ticos
            all_insights = []
            all_insights.extend(generate_insights(df_filtered, "volume"))
            all_insights.extend(generate_insights(df_filtered, "efficiency"))
            if 'DELTA_HORAS' in df_filtered.columns:
                all_insights.extend(generate_insights(df_filtered, "temporal"))
            
            for insight in all_insights:
                summary += f"- {insight}\n"
            
            if not all_insights:
                summary += "- Opera√ß√£o dentro dos par√¢metros normais\n"
                summary += "- Recomenda-se monitoramento cont√≠nuo\n"
            
            summary += f"""

## üìÖ SAZONALIDADE
**Per√≠odo de maior movimento:** {df_filtered.groupby(df_filtered['DATA_REALIZACAO'].dt.date).size().idxmax()}
**Dia da semana com mais exames:** {['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado', 'Domingo'][df_filtered['DIA_SEMANA'].mode().iloc[0]]}
**Per√≠odo do dia preferencial:** {df_filtered['PERIODO_DIA'].mode().iloc[0]}

---
*Relat√≥rio gerado automaticamente em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}*
"""
            return summary
        
        summary_text = create_executive_summary()
        st.download_button(
            "üìã **Resumo Executivo (TXT)**",
            summary_text.encode('utf-8'),
            "resumo_executivo.txt",
            "text/plain"
        )

    # ---------------------------
    # Resumos Detalhados dos Gr√°ficos
    # ---------------------------
    st.markdown("---")
    st.markdown("### üìã **Resumos Detalhados dos Gr√°ficos**")
    
    with st.expander("üìä **Interpreta√ß√£o dos Gr√°ficos - Vis√£o Geral**", expanded=False):
        st.markdown("""        
        **üîπ Distribui√ß√£o por Grupo de Exame (Pizza):**
        - Mostra a propor√ß√£o de cada tipo de exame realizado
        - √ötil para identificar os principais servi√ßos oferecidos
        - Cores diferentes facilitam a identifica√ß√£o visual
        - Hover mostra percentuais exatos
        
        **üîπ Top 10 Exames (Barras Horizontais):**
        - Lista os procedimentos mais frequentes em ordem decrescente
        - Permite identificar a demanda por tipo espec√≠fico de exame
        - Barras horizontais facilitam a leitura de nomes longos
        - Essencial para planejamento de recursos e equipamentos
        
        **üîπ Evolu√ß√£o Di√°ria (Linha Dupla):**
        - Gr√°fico superior: volume total de exames por dia
        - Gr√°fico inferior: n√∫mero de pacientes √∫nicos por dia
        - Identifica picos de demanda e sazonalidades
        - √ötil para planejamento de escalas e recursos
        """)
    
    with st.expander("‚è±Ô∏è **Interpreta√ß√£o dos Gr√°ficos - An√°lise Temporal**", expanded=False):
        st.markdown("""        
        **üîπ Distribui√ß√£o dos Tempos de Espera (Histograma):**
        - Mostra como os tempos de espera se distribuem
        - Linhas verticais indicam m√©dia (vermelha) e mediana (verde)
        - Concentra√ß√£o √† esquerda indica tempos menores
        - Cauda longa √† direita pode indicar casos problem√°ticos
        
        **üîπ Tempo por Grupo de Exame (Box Plot):**
        - Caixa central mostra 50% dos casos (quartis 1-3)
        - Linha central √© a mediana
        - Pontos externos s√£o outliers (casos extremos)
        - Permite comparar efici√™ncia entre diferentes tipos de exame
        
        **üîπ Heatmap Hora vs Dia da Semana:**
        - Cores mais intensas = maior volume
        - Identifica hor√°rios de pico e baixa demanda
        - Essencial para otimiza√ß√£o de recursos humanos
        - Azul mais escuro = maior concentra√ß√£o de exames
        """)
    
    with st.expander("üë• **Interpreta√ß√£o dos Gr√°ficos - An√°lise de Pacientes**", expanded=False):
        st.markdown("""        
        **üîπ Distribui√ß√£o Exames por Paciente (Barras):**
        - Mostra quantos pacientes fizeram 1, 2, 3... exames
        - Identifica padr√µes de reincid√™ncia
        - Maioria com 1 exame = baixa reincid√™ncia (normal)
        - Muitos com v√°rios exames = alta reincid√™ncia ou casos complexos
        
        **üîπ Top 15 Pacientes (Barras Horizontais):**
        - Lista pacientes com mais exames no per√≠odo
        - Cores indicam o exame mais comum para cada paciente
        - √ötil para identificar casos que requerem aten√ß√£o especial
        - Pode indicar tratamentos ou acompanhamentos espec√≠ficos
        
        **üîπ Tabela Detalhada de Pacientes:**
        - **Total_Exames**: n√∫mero total de exames do paciente
        - **Dias_Distintos**: em quantos dias diferentes fez exames
        - **Periodo_Dias**: intervalo entre primeiro e √∫ltimo exame
        - **Exame_Mais_Comum**: procedimento mais realizado
        - **Grupos_Diferentes**: diversidade de tipos de exame
        """)
    
    with st.expander("‚ò¢Ô∏è **Interpreta√ß√£o dos Gr√°ficos - Radioprote√ß√£o**", expanded=False):
        st.markdown("""        
        **üîπ Dose Total por Grupo (Barras Horizontais):**
        - Soma toda a radia√ß√£o estimada por categoria
        - TC e Raio-X geralmente t√™m maiores valores
        - Resson√¢ncia e Ultrassom t√™m dose zero (sem radia√ß√£o)
        - Importante para controle de exposi√ß√£o coletiva
        
        **üîπ Dose M√©dia vs Quantidade (Dispers√£o/Bolhas):**
        - Eixo X: quantos exames deste tipo foram feitos
        - Eixo Y: dose m√©dia individual
        - Tamanho da bolha: dose total acumulada
        - Identifica exames de alta dose mas baixa frequ√™ncia
        
        **üîπ Evolu√ß√£o Di√°ria da Dose:**
        - Linha s√≥lida: dose total di√°ria
        - Linha tracejada: m√©dia m√≥vel de 7 dias
        - Identifica tend√™ncias e picos de exposi√ß√£o
        - √ötil para controle temporal da radioprote√ß√£o
        
        **üîπ Alertas de Radioprote√ß√£o:**
        - **Verde**: todos dentro dos limites
        - **Amarelo**: alguns pacientes acima de 1 mSv/ano
        - **Vermelho**: pacientes requerem investiga√ß√£o (>20 mSv)
        """)
    
    with st.expander("üìà **Interpreta√ß√£o dos Gr√°ficos - Analytics Avan√ßado**", expanded=False):
        st.markdown("""        
        **üîπ Matriz de Correla√ß√£o:**
        - Cores azuis: correla√ß√£o positiva (quando um sobe, outro sobe)
        - Cores vermelhas: correla√ß√£o negativa (quando um sobe, outro desce)
        - Valores pr√≥ximos a 1 ou -1: correla√ß√£o forte
        - Valores pr√≥ximos a 0: sem correla√ß√£o
        
        **üîπ Dashboard de Tend√™ncias Mensais:**
        - **Superior esquerdo**: volume absoluto de exames por m√™s
        - **Superior direito**: n√∫mero de pacientes √∫nicos mensais
        - **Inferior esquerdo**: taxa de crescimento mensal (%)
        - **Inferior direito**: dose total mensal estimada
        
        **üîπ Utiliza√ß√£o da Capacidade:**
        - 100% = dia de maior movimento (capacidade m√°xima)
        - Linha laranja (70%): limiar de baixa utiliza√ß√£o
        - Linha vermelha (130%): poss√≠vel sobrecarga
        - Identifica oportunidades e gargalos operacionais
        
        **üîπ M√©tricas de Previs√£o:**
        - Baseada em m√©dia m√≥vel dos √∫ltimos 3 meses
        - Considera tend√™ncia de crescimento recente
        - √ötil para planejamento de curto prazo
        - Seta verde/vermelha indica tend√™ncia positiva/negativa
        """) 

    # ---------------------------
    # Footer com informa√ß√µes t√©cnicas
    # ---------------------------
    st.markdown("---")
    st.markdown(f"""
    <div style="text-align: center; padding: 2rem; background: #f8f9fa; border-radius: 10px; margin-top: 2rem;">
        <h4>üè• Relatorio Analitico</h4>
        <p><strong>Desenvolvido para Centros de Diagn√≥stico por Imagem</strong></p>
        <p>
            üìä An√°lises avan√ßadas | ‚ò¢Ô∏è Controle de radioprote√ß√£o | ‚è±Ô∏è M√©tricas temporais | 
            üë• Gest√£o de pacientes | üìà Business Intelligence
        </p>
        <p style="font-size: 0.9em; color: #6c757d;">
            Dados processados: <strong>{len(df_filtered):,}</strong> registros | 
            Per√≠odo: <strong>{data_inicio}</strong> a <strong>{data_fim}</strong> | 
            √öltima atualiza√ß√£o: <strong>{datetime.now().strftime('%d/%m/%Y %H:%M')}</strong>
        </p>
    </div>
    """, unsafe_allow_html=True)

else:
    # ---------------------------
    # P√°gina inicial quando n√£o h√° arquivo
    # ---------------------------
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("""
        <div style="text-align: center; padding: 3rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 15px; margin: 2rem 0;">
            <h2>üè• Bem-vindo ao Dashboard Radiol√≥gico</h2>
            <p style="font-size: 1.2em;">Sistema Completo de An√°lise de Dados Radiol√≥gicos</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Instru√ß√µes de uso
    st.markdown("### üöÄ **Como Come√ßar**")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        #### üìÇ **1. Prepare seus dados**
        - Arquivo Excel (.xlsx ou .xls)
        - Dados de exames radiol√≥gicos
        - Colunas obrigat√≥rias: DATA_REALIZACAO, EXAME
        - Colunas opcionais: PACIENTE, DATA_PEDIDO, etc.
        
        #### üîß **2. Configure os filtros**
        - Selecione per√≠odo de an√°lise
        - Escolha grupos de exame
        - Defina filtros espec√≠ficos
        - Ajuste tema visual
        """)
    
    with col2:
        st.markdown("""
        #### üìä **3. Explore as an√°lises**
        - **Vis√£o Geral**: m√©tricas principais e distribui√ß√µes
        - **An√°lise Temporal**: tempos de espera e sazonalidade
        - **Pacientes**: reincid√™ncia e jornadas
        - **Radioprote√ß√£o**: doses e alertas de seguran√ßa
        - **Analytics**: correla√ß√µes e previs√µes
        
        #### üìÑ **4. Exporte resultados**
        - Dados filtrados (CSV)
        - Relat√≥rio completo (Excel multi-abas)
        - Resumo executivo (TXT)
        """)
    
    # Recursos destacados
    st.markdown("### ‚ú® **Recursos Principais**")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <h4>üìä An√°lises Inteligentes</h4>
            <ul>
                <li>Detec√ß√£o autom√°tica de colunas</li>
                <li>Insights gerados automaticamente</li>
                <li>Correla√ß√µes avan√ßadas</li>
                <li>Previs√µes simples</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <h4>‚ò¢Ô∏è Radioprote√ß√£o</h4>
            <ul>
                <li>C√°lculo de doses estimadas</li>
                <li>Alertas autom√°ticos</li>
                <li>Controle por paciente</li>
                <li>Relat√≥rios de seguran√ßa</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card">
            <h4>üéØ Interface Avan√ßada</h4>
            <ul>
                <li>Design responsivo moderno</li>
                <li>Gr√°ficos interativos</li>
                <li>Filtros din√¢micos</li>
                <li>Exporta√ß√£o completa</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    # Exemplo de estrutura de dados
    st.markdown("### üìã **Estrutura de Dados Recomendada**")
    
    exemplo_df = pd.DataFrame({
        'ATEND': ['2024001', '2024002', '2024003'],
        'NOME_PACIENTE': ['Jo√£o Silva', 'Maria Santos', 'Pedro Costa'],
        'DATA_PEDIDO': ['2024-01-15', '2024-01-16', '2024-01-17'],
        'DATA_REALIZACAO': ['2024-01-16', '2024-01-18', '2024-01-17'],
        'EXAME': ['RX TORAX PA', 'TC ABDOME', 'US ABDOME'],
        'ENCAMINHAMENTO': ['CLINICA GERAL', 'GASTRO', 'CLINICA GERAL'],
        'TECNICO': ['TEC001', 'TEC002', 'TEC001'],
        'MEDICO': ['DR. SILVA', 'DR. SANTOS', 'DR. SILVA']
    })
    
    st.dataframe(exemplo_df, use_container_width=True)
    st.caption("üí° Exemplo de estrutura de dados. O sistema detecta automaticamente varia√ß√µes nos nomes das colunas.")
    
    # Call to action
    st.markdown("""
    <div style="text-align: center; padding: 2rem; background: #e3f2fd; border-radius: 10px; margin: 2rem 0;">
        <h3>üì§ Pronto para come√ßar?</h3>
        <p style="font-size: 1.1em;">Fa√ßa upload do seu arquivo Excel usando o bot√£o acima e descubra insights valiosos sobre seu centro radiol√≥gico!</p>
    </div>
    """, unsafe_allow_html=True)
